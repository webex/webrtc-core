#!/usr/bin/groovy

// Build Agent Info:
// https://engit.cisco.com/build/cloudbees-jenkins/documentation-central-jenkins-build-agents
pipeline {
  agent any

  tools {nodejs "Node v16"}

  options {
    ansiColor('xterm')
  }
  environment {
    PATH="/usr/cisco/bin/:$PATH"
  }

  stages {
    stage('Setup & Install Dependencies') {
      steps {
        sh 'node -v'
        sh 'npm -v'
        echo 'Install local Yarn'
        sh 'npm install yarn -D'
        echo " current workspace ${env.WORKSPACE}"
        echo 'Install dependencies (yarn install).'
        sh './node_modules/yarn/bin/yarn install'
      }
    }
    stage('Validate Lint') {
      steps {
        // Validate lint
        sh './node_modules/yarn/bin/yarn test:lint'
        //@TODO: handle lint errors (fail build??)
      }
    }
    stage('Run Unit Test') {
      steps {
        sh './node_modules/yarn/bin/yarn test:coverage'
        publishHTML([
          allowMissing: false,
          alwaysLinkToLastBuild: false,
          keepAll: true,
          reportDir: 'coverage',
          reportFiles: 'index.html',
          reportName: 'Jest Coverage Report',
          reportTitles: 'All Tests'
        ])
        publishCoverage adapters:
          [istanbulCoberturaAdapter('coverage/cobertura-coverage.xml')],
          calculateDiffForChangeRequests: true,
          failBuildIfCoverageDecreasedInChangeRequest: false,
          sourceFileResolver: sourceFiles('NEVER_STORE')
      }
    }
    stage('Run Integration Tests on Chrome') {
      steps {
        withCredentials([string(credentialsId: 'SAUCE_ACCESS_KEY', variable: 'SAUCE_ACCESS_KEY')]) {
         echo "SAUCE=$SAUCE"
         echo "SAUCE_USERNAME=$SAUCE_USERNAME"
         echo "SAUCE_ACCESS_KEY=$SAUCE_ACCESS_KEY"
         sh './node_modules/yarn/bin/yarn test:integration:chrome'
         }
      }
    }
     stage('Run Integration Tests on Safari') {
      steps {
        withCredentials([string(credentialsId: 'SAUCE_ACCESS_KEY', variable: 'SAUCE_ACCESS_KEY')]) {
         echo "SAUCE=$SAUCE"
         echo "SAUCE_USERNAME=$SAUCE_USERNAME"
         echo "SAUCE_ACCESS_KEY=$SAUCE_ACCESS_KEY"
         sh './node_modules/yarn/bin/yarn test:integration:safari'
         }
      }
    }
     stage('Run Integration Tests on Firefox') {
      steps {
        withCredentials([string(credentialsId: 'SAUCE_ACCESS_KEY', variable: 'SAUCE_ACCESS_KEY')]) {
         echo "SAUCE=$SAUCE"
         echo "SAUCE_USERNAME=$SAUCE_USERNAME"
         echo "SAUCE_ACCESS_KEY=$SAUCE_ACCESS_KEY"
         sh './node_modules/yarn/bin/yarn test:integration:firefox'
         }
      }
    }
     stage('Run Integration Tests on Edge') {
      steps {
        withCredentials([string(credentialsId: 'SAUCE_ACCESS_KEY', variable: 'SAUCE_ACCESS_KEY')]) {
         echo "SAUCE=$SAUCE"
         echo "SAUCE_USERNAME=$SAUCE_USERNAME"
         echo "SAUCE_ACCESS_KEY=$SAUCE_ACCESS_KEY"
         sh './node_modules/yarn/bin/yarn test:integration:edge'
         }
      }
    }
    stage('SonarQube Analysis') {
      environment {
        scannerHome = tool 'sonar-scanner'
      }
      steps {
        withSonarQubeEnv(credentialsId: 'sonar_login', installationName: 'BMS SonarQube') {
          echo "PATH=$PATH"
          sh 'env'
          sh "${scannerHome}/bin/sonar-scanner"
        }
      }
    }
    stage('Sonar GateKeeper') {
      steps {
        timeout(time: 10, unit: 'MINUTES') {
          // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
          // true = set pipeline to UNSTABLE, false = don't
          waitForQualityGate abortPipeline: true
        }
      }
    }
    stage('Build Package') {
      steps {
        sh './node_modules/yarn/bin/yarn build'
      }
    }
    stage('Publish Release') {
      steps {
        script  {
            if (env.BRANCH_NAME == "master") {
              echo 'Publishing to npm and creating release'
              sh "./node_modules/yarn/bin/yarn release"
            } else {
              echo "Skipping publish - This build is not occurring on a publish-able branch!"
            }
        }
      }
    }
  }
}
